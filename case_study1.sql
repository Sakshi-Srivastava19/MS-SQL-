--1. Display the number of states present in the LocationTable.
select count(distinct(state)) as no_ofstate from location

--2. How many products are of regular type?
select count(product) as regular_type_product from product where type='regular'

--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) from fact where productid=1

--4. What is the minimum sales of a product?
select f.* from fact as f inner join product as p on f.productid=p.productid
where sales=(select min(sales) as minimum_sales from fact)

--5. Display the max Cost of Good Sold (COGS)
select max(COGS) as max_cogs from fact

--6. Display the details of the product where product type is coffee.
Select * from product where product_type='coffee'

--7. Display the details where total expenses are greater than 40.
Select * from fact where total_expenses>40 

--8. What is the average sales in area code 719?
select avg(sales) avg_sales,area_code from fact where area_code=719 group by area_code 

--9. Find out the total profit generated by Colorado state.
select sum(profit) as sum_of_profit,state from fact as f inner join location as l on
f.area_code=l.area_code group by state having l.state='colorado'

--10. Display the average inventory for each product ID.
select productid,avg(inventory) as avg_inventory from fact group by productid 
order by productid asc

--11. Display state in a sequential order in a Location Table.
select distinct(state) from location order by state asc

--12. Display the average budget of the Product where the average budget margin should be greater than 100.
select avg(budget_margin) as avg_budget from fact group by Budget_Margin 
having avg(Budget_Margin)>100

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as total_sales from fact where date='2010-01-01'

--14. Display the average total expense of each product ID on an individual date.
select productid,avg(total_expenses) as avg_totalexpenses,date from fact group by productid,date 
order by productid,date asc

--15. Display the table with the following attributes such as date, product ID,
--product_type, product, sales, profit, state, area_code.
select date, f.productID, product_type,product,sales,profit,state,f.area_code from fact as f 
inner join product as p on f.productid=p.productid 
inner join location as l on f.area_code=l.area_code order by f.productid,f.date

--16. Display the rank without any gap to show the sales wise rank.
select sales, DENSE_RANK() over( order by sales desc) as rank from  fact 

--17. Find the state wise profit and sales.
select sum(profit),sum(f.sales),l.state from fact as f inner join location as l 
on f.area_code = l.area_code group by l.state order by l.state

--18. Find the state wise profit and sales along with the product name.
select l.state,product,sum(profit) as t_profit,sum(sales) as t_sales from fact as f
inner join location as l  on f.area_code = l.area_code 
inner join product as p on p.productid=f.productid group by  state ,product 
order by state ,product

--19. If there is an increase in sales of 5%, calculate the increasedsales.
select productid,sales,sales*1.05 as increasedsales from fact

--20. Find the maximum profit along with the product ID and producttype.
select f.productid,p.product_type,profit as max_profit from fact as f 
inner join product as p on p.productid=f.productid where profit=(select max(profit) from fact)

--21. Create a stored procedure to fetch the result according to the product type from Product Table.
create procedure ptype(@producttype varchar(max))
as
begin
  select * from product where product_type=@producttype
end
--for display
exec ptype  'tea'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then 
--it is a profit or else loss.

select total_expenses,
 case
   when (total_expenses<60) 
    then 'profit'
   else 'loss'
 end as profit_loss_sts
 from fact

--23. Give the total weekly sales value with the date and product ID details. 
--Use roll-up to pull the data in hierarchical order.
select datepart(week,date) as weekly,date,coalesce(convert(varchar,productid),'Total of productIDs')
as product_ID,sum(sales) as weekly_sales from fact group by rollup(date, productid )

--24. Apply union and intersection operator on the tables which consist of attribute area code.
select area_code from fact union select area_code from location 
select area_code from fact intersect select area_code from location 

--25. Create a user-defined function for the product table to fetch a particular 
--product type based upon the user’s preference.
create function userprefers(@producttype varchar(max))
returns table
as
return
 select * from product where @producttype=product_type

 select * from dbo.userprefers('coffee')

--26. Change the product type from coffee to tea where product ID is 1 and undo it.
begin transaction 
update product set product_type='tea' where productid=1 and product_type='coffee'
select * from product
rollback

--27. Display the date, product ID and sales where total expenses are between 100 to 200.
select date,productid, sales,total_expenses from fact where total_expenses between 100 and 200
order by date,productid
--28. Delete the records in the Product Table for regular type.
begin transaction
delete from product where type='regular'
select * from product 
rollback

--29. Display the ASCII value of the fifth character from the columnProduct
select product,substring(product,5,1) as fifthchar,ascii(substring(product,5,1)) as ascii_val from product









